<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="generator/generator.properties"/>
    <!-- 数据库驱动位置 -->
    <classPathEntry location="${classPath}" />
    <!-- 一个数据库一个context, targetRuntime:此属性用于指定生成的代码的运行时环境 ,MyBatis3:*这是默认值*,MyBatis3Simple不生成Example查询(避免后面一个一个表设置)     defaultModelType:如何生成实体类,flat表示为每一张表生成一个实体类，推荐使用-->
    <context id="mysqlTables" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 注释  type表示自定义注释-->
        <commentGenerator>
            <!-- 生成文件的编码 (eclipse插件的时候这里并没有什么卵用，需要在eclipse根目录的eclipse.ini最后添加 -Dfile.encoding=UTF-8  )-->
            <property name="javaFileEncoding" value="UTF-8"/>
            <!-- 是否取消注释 -->
            <property name="suppressAllComments" value="false" />
            <property name="addRemarkComments" value="true"/>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="true" />
            <!-- 当表名或者字段名为SQL关键字的时候，可以设置该属性为true，MBG会自动给表名或字段名添加**分隔符**  -->
            <property name="autoDelimitKeywords" value="true"></property>
            <!-- 由于beginningDelimiter和endingDelimiter的默认值为双引号(")，在Mysql中不能这么写，所以还要将这两个默认值改为**反单引号(`)** -->
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
        </commentGenerator>
        <!-- 数据库的url、用户名、密码 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.user}"
                        password="${jdbc.password}">
        </jdbcConnection>
        <!-- 类型转换 -->
        <javaTypeResolver >
            <!-- 是否使用bigDecimal， false可自动转化以下类型(Long, Integer, Short, etc.) -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
        <!-- 生成模型的包名和位置 -->
        <javaModelGenerator targetPackage="${package_domain}" targetProject="${project}">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.goshop.domain"， true:com.goshop.domain".[schemaName] -->
            <property name="enableSubPackages" value="false" />
            <!-- 是否针对string类型的字段在set的时候进行trim调用 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!-- 生成的映射文件包名和位置 -->
        <sqlMapGenerator targetPackage="${package_mapper}"  targetProject="${resource}">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.goshop.domain"， true:com.goshop.domain".[schemaName] -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!-- 生成DAO的包名和位置 type 1、ANNOTATEDMAPPER注解形式 2、XMLMAPPER xml配置文件形式-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${package_dao}"  targetProject="${project}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>
        <!-- 生成那些表 tableName表名 mapperName 生成dao的名称，domainObjectName应于数据库表的javaBean类名，enable*ByExample是否生成 example类 -->
         <table tableName="wuwu_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/>
        <!-- 忽略列，不生成bean 字段
        <ignoreColumn column="FRED" />-->
        <!-- 指定列的java数据类型
        <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />-->
    <!--    <table tableName="%" mapperName="{0}DAO">
            <columnOverride column="remarks" jdbcType="VARCHAR" />
        </table>-->
    </context>
</generatorConfiguration>